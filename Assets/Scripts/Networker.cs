using System.Collections; using System.Collections.Generic; using UnityEngine; using UnityEngine.Networking;  public class Networker : NetworkManager {     public ViewHolder viewHolder;      public GameObject matchPrefab;      public void StartAsHost()     {         StartHost();         print("Starting as host ...");     }      public void StopAsHost()     {         StopHost();     }      public void StartAsClient()     {         StartClient();         print("Starting as client ...");     }      public void StopAsClient()     {         StopClient();     }      public void SpawnMatch(int skill, bool[] teams)     {         var gob = (GameObject)Instantiate(matchPrefab);         Match m = gob.GetComponent<Match>();         m.SetSkillLevel(skill,GetSolutionForDifficulty(skill));         m.SetActiveTeams(teams);         m.ResetScores();         print("Spawning match");         NetworkServer.Spawn(gob);     }      public void DisconnectHostFromMatch()     {         print("Disconnecting host");         StopHost();     }      public void DisconnectClientFromMatch()     {         print("Disconnecting client");         StopClient();     }      public override void OnServerDisconnect(NetworkConnection conn)     {         print("OnServerDisconnect");         base.OnServerDisconnect(conn);     }      public override void OnClientDisconnect(NetworkConnection conn)     {         print("OnClientDisconnect");         base.OnClientDisconnect(conn);     }      public int[] GetSolutionForDifficulty(int d)     {         int[] b;          if (d <= 2)         {             b = new int[]{
                51,52,53,54,                 53,04,51,52,                 52,03,04,01,                 04,51,02,53
            };             Scramble4x4(b);         }         else if (d <= 5)         {             b = new int[]{                 52,56,03,55,04,51,                 05,04,51,06,03,52,                 54,01,02,03,56,05,                 06,53,05,02,01,54,                 51,02,06,54,05,03,                 53,05,54,01,52,56             };             Scramble6x6(b);         }         else         {
            b = new int[]{             09,01,52,05,03,06,08,07,04,             05,08,53,04,51,07,09,02,56,             06,54,07,09,52,08,01,53,05,             51,07,04,08,05,53,02,06,59,             08,06,55,07,09,02,54,01,03,             52,03,09,56,04,01,07,05,58,             03,59,08,01,57,05,06,54,02,             57,02,06,03,58,04,55,09,01,             04,05,01,02,06,09,53,08,07             };             Scramble9x9(b);         }          return b;     }      public void Scramble4x4(int[] b)     {         // Switch numbers         int[] randomOrder = RandomIndex(4);         for (int i = 0; i < 16;i++)         {             int p = b[i];             b[i] = 10 * (p / 10) + 1 + randomOrder[(p % 10) - 1];         }
        // Switch rows
        int[] blockOrder = RandomIndex(2);         for (int i = 0; i < 2;i++)         {             int[] rowOrder = RandomIndex(2);             for (int j = 0; j < 2;j++)             {                 randomOrder[i * 2 + j] = blockOrder[i] * 2 + rowOrder[j];             }         }         int[] b2 = new int[16];         for (int i = 0; i < 4;i++)         {             for (int j = 0; j < 4;j++)             {                 b2[i * 4 + j] = b[randomOrder[i] * 4 + j];             }         }         // Switch columns         blockOrder = RandomIndex(2);         for (int i = 0; i < 2; i++)         {             int[] colOrder = RandomIndex(2);             for (int j = 0; j < 2; j++)             {                 randomOrder[i * 2 + j] = blockOrder[i] * 2 + colOrder[j];             }         }         for (int i = 0; i < 4; i++)         {             for (int j = 0; j < 4; j++)             {                 b[i * 4 + j] = b2[i * 4 + randomOrder[j]];             }         }     }      public void Scramble6x6(int[] b)     {         // Switch numbers         int[] randomOrder = RandomIndex(6);         for (int i = 0; i < 36; i++)         {             int p = b[i];             b[i] = 10 * (p / 10) + 1 + randomOrder[(p % 10) - 1];         }         // Switch rows         int[] blockOrder = RandomIndex(3);         for (int i = 0; i < 3; i++)         {             int[] rowOrder = RandomIndex(2);             for (int j = 0; j < 2; j++)             {                 randomOrder[i * 2 + j] = blockOrder[i] * 2 + rowOrder[j];             }         }         int[] b2 = new int[36];         for (int i = 0; i < 6; i++)         {             for (int j = 0; j < 6; j++)             {                 b2[i * 6 + j] = b[randomOrder[i] * 6 + j];             }         }         // Switch columns         blockOrder = RandomIndex(2);         for (int i = 0; i < 2; i++)         {             int[] colOrder = RandomIndex(3);             for (int j = 0; j < 3; j++)             {                 randomOrder[i * 3 + j] = blockOrder[i] * 3 + colOrder[j];             }         }         for (int i = 0; i < 6; i++)         {             for (int j = 0; j < 6; j++)             {                 b[i * 6 + j] = b2[i * 6 + randomOrder[j]];             }         }     }      public void Scramble9x9(int[] b)     {         // Switch numbers         int[] randomOrder = RandomIndex(9);         for (int i = 0; i < 81; i++)         {             int p = b[i];             b[i] = 10 * (p / 10) + 1 + randomOrder[(p % 10) - 1];         }         // Switch rows         int[] blockOrder = RandomIndex(3);         for (int i = 0; i < 3; i++)         {             int[] rowOrder = RandomIndex(3);             for (int j = 0; j < 3; j++)             {                 randomOrder[i * 3 + j] = blockOrder[i] * 3 + rowOrder[j];             }         }         int[] b2 = new int[81];         for (int i = 0; i < 9; i++)         {             for (int j = 0; j < 9; j++)             {                 b2[i * 9 + j] = b[randomOrder[i] * 9 + j];             }         }         // Switch columns         blockOrder = RandomIndex(3);         for (int i = 0; i < 3; i++)         {             int[] colOrder = RandomIndex(3);             for (int j = 0; j < 3; j++)             {                 randomOrder[i * 3 + j] = blockOrder[i] * 3 + colOrder[j];             }         }         for (int i = 0; i < 9; i++)         {             for (int j = 0; j < 9; j++)             {                 b[i * 9 + j] = b2[i * 9 + randomOrder[j]];             }         }     }      public int[] RandomIndex(int len)     {         int[] ix = new int[len];         for (int i = 0; i < len;i++)         {             ix[i] = i;         }         for (int i = 0; i < len-1; i++)         {             int p = Random.Range(i+1, len);             int l = ix[i];             ix[i] = ix[p];             ix[p] = l;         }         return ix;     } } 
